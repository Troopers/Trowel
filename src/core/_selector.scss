@import '../extensions/class';
@import '../extensions/map';

@function selector--constructor($block, $syntax: null, $tag: null, $pseudo-classes: null, $element: null, $modifier: null, $modifiers-element: null, $pseudo-element: null, $attribute: null, $breakpoint: null, $parents: null) {
  $this: (
    'prefix-separator': map-get-deep($trowel-config, 'syntax' 'separator' 'prefix'),
    'element-separator': map-get-deep($trowel-config, 'syntax' 'separator' 'element'),
    'modifier-separator': map-get-deep($trowel-config, 'syntax' 'separator' 'modifier'),
  );

  @if map-get-deep($trowel-config, 'syntax' 'prefix') {
    $this: selector--set-prefix($this, map-get-deep($trowel-config, 'syntax' 'prefix'));
  }

  // Syntax
  @if $syntax {
    @if map-has-key($syntax, 'prefix') {
      $this: selector--set-prefix($this, map-get($syntax, 'prefix'));
    }

    @if map-has-key($syntax, 'separator') {
      $separators: map-get($syntax, 'separator');

      @if map-has-key($separators, 'prefix') {
        $this: selector--set-prefix-separator($this, map-get($separators, 'prefix'));
      }

      @if map-has-key($separators, 'element') {
        $this: selector--set-element-separator($this, map-get($separators, 'element'));
      }

      @if map-has-key($separators, 'modifier') {
        $this: selector--set-modifier-separator($this, map-get($separators, 'modifier'));
      }
    }
  }

  $this: selector--set-block($this, $block);
  $this: selector--set-element($this, $element);
  $this: selector--set-modifiers($this, $modifier);
  $this: selector--set-modifiers-element($this, $modifiers-element);
  $this: selector--set-pseudo-element($this, $pseudo-element);
  $this: selector--set-attributes($this, $attribute);
  $this: selector--set-tag($this, $tag);
  $this: selector--set-pseudo-classes($this, $pseudo-classes);
  $this: selector--set-breakpoint($this, $breakpoint);
  $this: selector--set-parents($this, $parents);

  @return $this;
};

@function selector--get-prefix($this) {
  @return class--get-attribute($this, 'prefix');
}

@function selector--set-prefix($this, $prefix) {
  $type: class--type('selector', 'prefix', $prefix, 'string');
  $nullable: class--nullable('selector', 'prefix', $prefix, true);

  @return class--set-attribute($this, 'prefix', $prefix);
}

@function selector--get-prefix-separator($this) {
  @return class--get-attribute($this, 'prefix-separator');
}

@function selector--set-prefix-separator($this, $prefix-separator) {
  $type: selector--type('selector', 'prefix-separator', $prefix-separator, 'string');
  $nullable: selector--nullable('selector', 'prefix-separator', $prefix-separator, false);

  @return class--set-attribute($this, 'prefix-separator', $prefix-separator);
}

@function selector--get-print-prefix($this) {
  $separator: selector--get-prefix-separator($this);
  @return if(selector--get-prefix($this), selector--get-prefix($this) + $separator, '');
}

@function selector--get-block($this) {
  @return class--get-attribute($this, 'block');
}

@function selector--set-block($this, $block) {
  $type: class--type('selector', 'block', $block, 'string');
  @return class--set-attribute($this, 'block', $block);
}

@function selector--get-tag($this) {
  @return class--get-attribute($this, 'tag');
}

@function selector--set-tag($this, $tag) {
  $type: class--type('selector', 'tag', $tag, 'string');
  $nullable: class--nullable('selector', 'tag', $tag, true);

  @return class--set-attribute($this, 'tag', $tag);
}

@function selector--get-print-tag($this) {
  @return if(selector--get-tag($this), selector--get-tag($this), '');
}

@function selector--get-pseudo-classes($this, $nth: null) {
  @return class--get-attribute($this, 'pseudo-classes', $nth);
}

@function selector--set-pseudo-classes($this, $pseudo-classes) {
  $nullable: selector--nullable('selector', 'pseudo-classes', $pseudo-classes, true);

  @return class--set-attribute($this, 'pseudo-classes', $pseudo-classes);
}

@function selector--append-pseudo-class($this, $pseudo-class) {
  $type: selector--type('selector', 'pseudo-classes', $pseudo-class, 'string');

  @return class--append-attribute($this, 'pseudo-classes', $pseudo-class);
}

@function selector--get-print-pseudo-classes($this, $nth) {
  @return if(selector--get-pseudo-classes($this, $nth), ':' + selector--get-pseudo-classes($this, $nth), '');
}

@function selector--get-element($this) {
  @return class--get-attribute($this, 'element');
}

@function selector--set-element($this, $element) {
  $type: class--type('selector', 'element', $element, 'string');
  $nullable: class--nullable('selector', 'element', $element, true);

  @return class--set-attribute($this, 'element', $element);
}

@function selector--get-element-separator($this) {
  @return class--get-attribute($this, 'element-separator');
}

@function selector--set-element-separator($this, $element-separator) {
  $type: class--type('selector', 'element-separator', $element-separator, 'string');
  $nullable: class--nullable('selector', 'element-separator', $element-separator, false);

  @return class--set-attribute($this, 'element-separator', $element-separator);
}

@function selector--get-print-element($this) {
  $separator: selector--get-element-separator($this);
  @return if(selector--get-element($this), $separator + selector--get-element($this), '');
}

@function selector--get-modifiers($this, $nth: null) {
  @return class--get-attribute($this, 'modifiers', $nth);
}

@function selector--set-modifiers($this, $modifiers) {
  $nullable: selector--nullable('selector', 'nullable', $modifiers, true);

  @return class--set-attribute($this, 'modifiers', $modifiers);
}

@function selector--append-modifier($this, $modifier) {
  $type: selector--type('selector', 'modifiers', $modifier, 'string');

  @return class--append-attribute($this, 'modifiers', $modifier);
}

@function selector--get-print-modifiers($this, $nth) {
  $separator: selector--get-modifier-separator($this);
  @return if(selector--get-modifiers($this, $nth), $separator + selector--get-modifiers($this, $nth), '');
}

@function selector--get-modifiers-element($this, $nth: null) {
  @return class--get-attribute($this, 'modifiers-element', $nth);
}

@function selector--set-modifiers-element($this, $modifiers-element) {
  @if selector--get-element($this) {
    $nullable: selector--nullable('selector', 'nullable', $modifiers-element, true);
    @return class--set-attribute($this, 'modifiers-element', $modifiers-element);
  } @else {
    @return selector--set-modifiers($this, $modifiers-element);
  }
}

@function selector--append-modifier-element($this, $modifier-element) {
  @if selector--get-element($this) {
    $type: selector--type('selector', 'modifiers-element', $modifier-element, 'string');
    @return class--append-attribute($this, 'modifiers-element', $modifier-element);
  } @else {
    @return selector--append-modifier($this, $modifier-element);
  }
}

@function selector--get-modifier-separator($this) {
  @return class--get-attribute($this, 'modifier-separator');
}

@function selector--set-modifier-separator($this, $modifier-separator) {
  $type: class--type('selector', 'modifier-separator', $modifier-separator, 'string');
  $nullable: class--nullable('selector', 'modifier-separator', $modifier-separator, false);

  @return class--set-attribute($this, 'modifier-separator', $modifier-separator);
}

@function selector--get-print-modifiers-element($this, $nth) {
  $separator: selector--get-modifier-separator($this);
  @return if(selector--get-modifiers-element($this, $nth), $separator + selector--get-modifiers-element($this, $nth), '');
}

@function selector--get-attributes($this, $nth: null) {
  @return class--get-attribute($this, 'attributes', $nth);
}

@function selector--set-attributes($this, $attribute) {
  $nullable: class--nullable('selector', 'attributes', $attribute, true);

  @return class--set-attribute($this, 'attributes', $attribute);
}

@function selector--append-attribute($this, $attribute) {
  $type: class--type('selector', 'attributes', $attribute, 'string');

  @return class--append-attribute($this, 'attributes', $attribute);
}

@function selector--get-print-attributes($this, $nth) {
  @return if(selector--get-attributes($this, $nth), '[' + selector--get-attributes($this, $nth) + ']', '');
}

@function selector--get-breakpoint($this) {
  @return class--get-attribute($this, 'breakpoint');
}

@function selector--set-breakpoint($this, $breakpoint) {
  $type: selector--type('selector', 'breakpoint', $breakpoint, 'string');
  $nullable: selector--nullable('selector', 'breakpoint', $breakpoint, true);

  @return class--set-attribute($this, 'breakpoint', $breakpoint);
}

@function selector--get-pseudo-element($this) {
  @return class--get-attribute($this, 'pseudo-element');
}

@function selector--set-pseudo-element($this, $pseudo-element) {
  $type: class--type('selector', 'pseudo-element', $pseudo-element, 'string');
  $nullable: class--nullable('selector', 'pseudo-element', $pseudo-element, true);

  @return class--set-attribute($this, 'pseudo-element', $pseudo-element);
}

@function selector--get-print-pseudo-element($this) {
  @return if(selector--get-pseudo-element($this), '::' + selector--get-pseudo-element($this), '');
}

@function selector--get-parents($this, $nth: null) {
  @return class--get-attribute($this, 'parents', $nth);
}

@function selector--set-parents($this, $parents) {
  $nullable: selector--nullable('selector', 'parents', $parents, true);

  @return class--set-attribute($this, 'parents', $parents);
}

@function selector--append-parent($this, $parent, $relationship: '') {
  @if $relationship == '' {
    $relationship: ' ';
  } @elseif $relationship == '&' {
    $relationship: '';
  } @else {
    $relationship: ' #{$relationship} ';
  }

  $parent: (
    'selector': $parent,
    'relationship': $relationship,
  );

  @return class--append-attribute($this, 'parents', $parent);
}

@function selector--get-print-parents($this) {
  $parents: selector--get-parents($this);
  $print: '';

  @if not $parents or length($parents) == 0 {
    @return $print;
  }

  @each $parent in $parents {
    $parent-selector: map-get($parent, 'selector');
    $parent-relationship: map-get($parent, 'relationship');
    $selector-print: if(type-of($parent-selector) == 'string', #{$parent-selector}, selector--get-print($parent-selector));
    $print: $print + $selector-print + $parent-relationship;
  }

  @return $print;
}

@function selector--get-print($this) {
  $print--tag: selector--get-print-tag($this);
  $print--prefix: selector--get-print-prefix($this);
  $print--block: selector--get-block($this);
  $print--element: selector--get-print-element($this);
  $print--pseudo-element: selector--get-print-pseudo-element($this);

  $print--base: '.' + $print--prefix + $print--block;

  $print--modifier: '';
  @if selector--get-modifiers($this) {
    @for $index from 1 through length(selector--get-modifiers($this)) {
      $print--modifier: $print--modifier + $print--base + selector--get-print-modifiers($this, $index);
    }
  }

  $print--modifiers-element: '';
  @if selector--get-modifiers-element($this) {
    @for $index from 1 through length(selector--get-modifiers-element($this)) {
      $print--modifiers-element: $print--modifiers-element + $print--base + $print--element + selector--get-print-modifiers-element($this, $index);
    }
  }

  $print--attribute: '';
  @if selector--get-attributes($this) {
    @for $index from 1 through length(selector--get-attributes($this)) {
      $print--attribute: $print--attribute + selector--get-print-attributes($this, $index);
    }
  }

  $print--pseudo-classes: '';
  @if selector--get-pseudo-classes($this) {
    @for $index from 1 through length(selector--get-pseudo-classes($this)) {
      $print--pseudo-classes: $print--pseudo-classes + selector--get-print-pseudo-classes($this, $index);
    }
  }

  @if selector--get-modifiers($this) and selector--get-modifiers-element($this) {
    @return $print--modifier + ' ' + $print--tag + $print--modifiers-element + $print--attribute + $print--pseudo-classes + $print--pseudo-element;
  }

  @if selector--get-modifiers($this) and selector--get-element($this) {
    @return $print--modifier + ' ' + $print--tag + $print--base + $print--element + $print--attribute + $print--pseudo-classes + $print--pseudo-element;
  }

  @if selector--get-modifiers($this) {
    @return $print--tag + $print--modifier + $print--attribute + $print--pseudo-classes + $print--pseudo-element;
  }

  @if selector--get-modifiers-element($this) {
    @return $print--tag + $print--modifiers-element + $print--attribute + $print--pseudo-classes + $print--pseudo-element;
  }

  @return $print--tag + $print--base + $print--element + $print--attribute + $print--pseudo-classes + $print--pseudo-element;
}
