@import 'utils';
@import 'breakpoints';
@import 'block';

$selector--prototype: (
  '~': (
    'classname': 'selector',
  ),
  'prefix': (
    'type': 'string',
    'nullable': true,
  ),
  'prefix-separator': (
    'type': 'string',
    'nullable': false,
    'value': '-'
  ),
  'block': (
    'type': 'string',
  ),
  'element': (
    'type': 'string',
    'nullable': true,
  ),
  'element-separator': (
    'type': 'string',
    'nullable': false,
    'value': '__'
  ),
  'modifier': (
    'type': 'string',
    'nullable': true,
    'collection': true,
  ),
  'modifier-separator': (
    'type': 'string',
    'nullable': false,
    'value': '--'
  ),
  'tag': (
    'type': 'string',
    'nullable': true,
  ),
  'pseudo-classes': (
    'type': 'string',
    'nullable': true,
    'collection': true,
    'choices': ('hover', 'focus', 'active', 'visited'),
  ),
  'pseudo-element': (
    'type': 'string',
    'nullable': true,
  ),
  'attribute': (
    'type': 'string',
    'nullable': true,
    'collection': true,
  ),
  'breakpoint': (
    'type': 'string',
    'nullable': true,
  ),
  'is-nested': (
    'type': 'bool',
  ),
  'parents': (
    'type': 'map',
    'nullable': true,
    'collection': true,
  )
);

@function selector--constructor($synthax, $block, $tag: null, $pseudo-classes: null, $element: null, $modifier: null, $pseudo-element: null, $attribute: null, $breakpoint: null, $is-nested: false, $parents: null) {
  $this: $selector--prototype;

  // Synthax
  @if $synthax {
    @if map-has-key($synthax, 'prefix') {
      $this: selector--set-prefix($this, map-get($synthax, 'prefix'));
    }

    @if map-has-key($synthax, 'separator') {
      $separators: map-get($synthax, 'separator');

      @if map-has-key($separators, 'prefix') {
        $this: selector--set-prefix-separator($this, map-get($separators, 'prefix'));
      }

      @if map-has-key($separators, 'element') {
        $this: selector--set-element-separator($this, map-get($separators, 'element'));
      }

      @if map-has-key($separators, 'modifier') {
        $this: selector--set-modifier-separator($this, map-get($separators, 'modifier'));
      }
    }
  }

  $this: selector--set-block($this, $block);
  $this: selector--set-element($this, $element);
  $this: selector--set-modifier($this, $modifier);
  $this: selector--set-pseudo-element($this, $pseudo-element);
  $this: selector--set-attribute($this, $attribute);
  $this: selector--set-tag($this, $tag);
  $this: selector--set-pseudo-classes($this, $pseudo-classes);
  $this: selector--set-breakpoint($this, $breakpoint);
  $this: selector--set-is-nested($this, $is-nested);
  $this: selector--set-parents($this, $parents);

  @return $this;
};

/// @name get prefix
/// @access public
/// @group class selector
/// @param {map} $this - the `selector class object`
/// @return {string} prefix
@function selector--get-prefix($this) {
  @return class--get-attribute-value($this, 'prefix');
}

/// @name set prefix
/// @access public
/// @group class selector
/// @param {map} $selector
/// @param {string} $prefix
/// @return {map} selector class object updated with new 'prefix' value
@function selector--set-prefix($this, $prefix) {
  @return class--set-attribute-value($this, 'prefix', $prefix);
}

/// @name get prefix-separator
/// @access public
/// @group class selector
/// @param {map} $this - the `selector class object`
/// @return {string} prefix-separator
@function selector--get-prefix-separator($this) {
  @return class--get-attribute-value($this, 'prefix-separator');
}

/// @name set prefix-separator
/// @access public
/// @group class selector
/// @param {map} $selector
/// @param {string} $prefix-separator
/// @return {map} selector class object updated with new 'prefix-separator' value
@function selector--set-prefix-separator($this, $prefix-separator) {
  @return class--set-attribute-value($this, 'prefix-separator', $prefix-separator);
}

/// @name get print prefix
/// @access public
/// @group class selector
/// @param {map} $this - the `selector class object`
/// @return {string} prefix or empty array if no prefix is setted
@function selector--get-print-prefix($this) {
  $separator: selector--get-prefix-separator($this);
  @return if(selector--get-prefix($this), selector--get-prefix($this) + $separator, '');
}

/// @name get block
/// @access public
/// @group class selector
/// @param {map} $this - the `selector class object`
/// @return {string} block
@function selector--get-block($this) {
  @return class--get-attribute-value($this, 'block');
}

/// @name set block
/// @access public
/// @group class selector
/// @param {map} $this
/// @param {string} $block
/// @return {map} selector class object updated with new 'block' value
@function selector--set-block($this, $block) {
  @return class--set-attribute-value($this, 'block', $block);
}
/// @name get tag
/// @access public
/// @group class selector
/// @param {map} $this - the `selector class object`
/// @return {string} tag
@function selector--get-tag($this) {
  @return class--get-attribute-value($this, 'tag');
}

/// @name set tag
/// @access public
/// @group class selector
/// @param {map} $selector
/// @param {string} $tag
/// @return {map} selector class object updated with new 'tag' value
@function selector--set-tag($this, $tag) {
  @return class--set-attribute-value($this, 'tag', $tag);
}

/// @name get print tag
/// @access public
/// @group class selector
/// @param {map} $this - the `selector class object`
/// @return {string} tag or empty array if no tag is setted
@function selector--get-print-tag($this) {
  @return if(selector--get-tag($this), selector--get-tag($this), '');
}

/// @name get pseudo-classes
/// @access public
/// @group class selector
/// @param {map} $this - the `selector class object`
/// @return {string} pseudo-classes
@function selector--get-pseudo-classes($this, $nth: null) {
  @return class--get-attribute-value($this, 'pseudo-classes', $nth);
}

/// @name set pseudo-classes
/// @access public
/// @group class selector
/// @param {map} $selector
/// @param {string} $pseudo-classes
/// @return {map} selector class object updated with new 'pseudo-classes' value
@function selector--set-pseudo-classes($this, $pseudo-classes) {
  @return class--set-attribute-value($this, 'pseudo-classes', $pseudo-classes);
}

/// @name append pseudo-classes
/// @access public
/// @group class selector
/// @param {map} $selector
/// @param {string} $pseudo-classes
/// @return {map} selector class object updated with new 'pseudo-classes' appended to the previous list
@function selector--append-pseudo-classes($this, $pseudo-classes) {
  @if type-of($pseudo-classes) != 'list' {
    $pseudo-classes: ($pseudo-classes,);
  }

  $previous-value: selector--get-pseudo-classes($this);
  @return class--set-attribute-value($this, 'pseudo-classes', $pseudo-classes, $previous-value);
}

/// @name get print tag
/// @access public
/// @group class selector
/// @param {map} $this - the `selector class object`
/// @return {string} tag or empty array if no tag is setted
@function selector--get-print-pseudo-classes($this, $nth) {
  @return if(selector--get-pseudo-classes($this, $nth), ':' + selector--get-pseudo-classes($this, $nth), '');
}

/// @name get element
/// @access public
/// @group class selector
/// @param {map} $this - the `selector class object`
/// @return {string} element
@function selector--get-element($this) {
  @return class--get-attribute-value($this, 'element');
}

/// @name set element
/// @access public
/// @group class selector
/// @param {map} $selector
/// @param {string} $element
/// @return {map} selector class object updated with new 'element' value
@function selector--set-element($this, $element) {
  @return class--set-attribute-value($this, 'element', $element);
}

/// @name get element-separator
/// @access public
/// @group class selector
/// @param {map} $this - the `selector class object`
/// @return {string} element-separator
@function selector--get-element-separator($this) {
  @return class--get-attribute-value($this, 'element-separator');
}

/// @name set element-separator
/// @access public
/// @group class selector
/// @param {map} $selector
/// @param {string} $element-separator
/// @return {map} selector class object updated with new 'element-separator' value
@function selector--set-element-separator($this, $element-separator) {
  @return class--set-attribute-value($this, 'element-separator', $element-separator);
}

/// @name get print element
/// @access public
/// @group class selector
/// @param {map} $this - the `selector class object`
/// @return {string} element or empty array if no element is setted
@function selector--get-print-element($this) {
  $separator: selector--get-element-separator($this);
  @return if(selector--get-element($this), $separator + selector--get-element($this), '');
}

/// @name get modifier
/// @access public
/// @group class selector
/// @param {map} $this - the `selector class object`
/// @return {string} modifier
@function selector--get-modifier($this, $nth: null) {
  @return class--get-attribute-value($this, 'modifier', $nth);
}

/// @name set modifier
/// @access public
/// @group class selector
/// @param {map} $selector
/// @param {string} $modifier
/// @return {map} selector class object updated with new 'modifier' value
@function selector--set-modifier($this, $modifier) {
  @return class--set-attribute-value($this, 'modifier', $modifier);
}

/// @name append modifier
/// @access public
/// @group class selector
/// @param {map} $selector
/// @param {string} $modifier
/// @return {map} selector class object updated with new 'modifier' appended to the previous list
@function selector--append-modifier($this, $modifier) {
  @if type-of($modifier) != 'list' {
    $modifier: ($modifier,);
  }

  $previous-value: selector--get-modifier($this);
  @return class--set-attribute-value($this, 'modifier', $modifier, $previous-value);
}


/// @name get modifier-separator
/// @access public
/// @group class selector
/// @param {map} $this - the `selector class object`
/// @return {string} modifier-separator
@function selector--get-modifier-separator($this) {
  @return class--get-attribute-value($this, 'modifier-separator');
}

/// @name set modifier-separator
/// @access public
/// @group class selector
/// @param {map} $selector
/// @param {string} $modifier-separator
/// @return {map} selector class object updated with new 'modifier-separator' value
@function selector--set-modifier-separator($this, $modifier-separator) {
  @return class--set-attribute-value($this, 'modifier-separator', $modifier-separator);
}

/// @name get print modifier
/// @access public
/// @group class selector
/// @param {map} $this - the `selector class object`
/// @param {map} $nth - the index of the modifier item
/// @return {string} modifier or empty array if no modifier is setted
@function selector--get-print-modifier($this, $nth) {
  $separator: selector--get-modifier-separator($this);
  @return if(selector--get-modifier($this, $nth), $separator + selector--get-modifier($this, $nth), '');
}

/// @name get attribute
/// @access public
/// @group class selector
/// @param {map} $this - the `selector class object`
/// @return {string} attribute
@function selector--get-attribute($this, $nth: null) {
  @return class--get-attribute-value($this, 'attribute', $nth);
}

/// @name set attribute
/// @access public
/// @group class selector
/// @param {map} $selector
/// @param {string} $attribute
/// @return {map} selector class object updated with new 'attribute' value
@function selector--set-attribute($this, $attribute) {
  @return class--set-attribute-value($this, 'attribute', $attribute);
}

/// @name append attribute
/// @access public
/// @group class selector
/// @param {map} $selector
/// @param {string} $attribute
/// @return {map} selector class object updated with new 'attribute' appended to the previous list
@function selector--append-attribute($this, $attribute) {
  @if type-of($attribute) != 'list' {
    $attribute: ($attribute,);
  }

  $previous-value: selector--get-attribute($this);
  @return class--set-attribute-value($this, 'attribute', $attribute, $previous-value);
}

/// @name get print attribute
/// @access public
/// @group class selector
/// @param {map} $this - the `selector class object`
/// @param {map} $nth - the index of the attribute item
/// @return {string} attribute or empty array if no attribute is setted
@function selector--get-print-attribute($this, $nth) {
  @return if(selector--get-attribute($this, $nth), '[' + selector--get-attribute($this, $nth) + ']', '');
}

/// @name get is-nested
/// @access public
/// @group class selector
/// @param {map} $this - the `selector class object`
/// @return {string} is-nested
@function selector--get-is-nested($this) {
  @return class--get-attribute-value($this, 'is-nested');
}

/// @name set is-nested
/// @access public
/// @group class selector
/// @param {map} $selector
/// @param {string} $is-nested
/// @return {map} selector class object updated with new 'is-nested' value
@function selector--set-is-nested($this, $is-nested) {
  @return class--set-attribute-value($this, 'is-nested', $is-nested);
}

/// @name get breakpoint
/// @access public
/// @group class selector
/// @param {map} $this - the `selector class object`
/// @return {string} breakpoint
@function selector--get-breakpoint($this) {
  @return class--get-attribute-value($this, 'breakpoint');
}

/// @name set breakpoint
/// @access public
/// @group class selector
/// @param {map} $selector
/// @param {string} $breakpoint
/// @return {map} selector class object updated with new 'breakpoint' value
@function selector--set-breakpoint($this, $breakpoint) {
  @return class--set-attribute-value($this, 'breakpoint', $breakpoint);
}

/// @name get pseudo-element
/// @access public
/// @group class selector
/// @param {map} $this - the `selector class object`
/// @return {string} pseudo-element
@function selector--get-pseudo-element($this) {
  @return class--get-attribute-value($this, 'pseudo-element');
}

/// @name set pseudo-element
/// @access public
/// @group class selector
/// @param {map} $selector
/// @param {string} $pseudo-element
/// @return {map} selector class object updated with new 'pseudo-element' value
@function selector--set-pseudo-element($this, $pseudo-element) {
  @return class--set-attribute-value($this, 'pseudo-element', $pseudo-element);
}

/// @name get print pseudo-element
/// @access public
/// @group class selector
/// @param {map} $this - the `selector class object`
/// @return {string} pseudo-element or empty array if no pseudo-element is setted
@function selector--get-print-pseudo-element($this) {
  @return if(class--get-attribute-value($this, 'pseudo-element'), '::' + class--get-attribute-value($this, 'pseudo-element'), '');
}

/// @name get parents
/// @access public
/// @group class selector
/// @param {map} $this - the `selector class object`
/// @return {string} parents
@function selector--get-parents($this, $nth: null) {
  @return class--get-attribute-value($this, 'parents', $nth);
}

/// @name set parents
/// @access public
/// @group class selector
/// @param {map} $selector
/// @param {string} $parents
/// @return {map} selector class object updated with new 'parents' value
@function selector--set-parents($this, $parents) {
  @return class--set-attribute-value($this, 'parents', $parents);
}

/// @name append parents
/// @access public
/// @group class selector
/// @param {map} $selector
/// @param {map} $parent
/// @param {string} $relationship ['']
/// @return {map} selector class object updated with new 'parents' appended to the previous list
@function selector--append-parent($this, $parent, $relationship: '') {

  // Check if parent is a selector object
  @if map-get(map-get($parent, '~'), 'classname') != 'selector' {
    @error 'the method selector--append-parent(), must have as second parameter a valid selector object';
  }

  $parents: ((
    'selector': $parent,
    'relationship': if($relationship == '', ' ', ' #{$relationship} '),
  ), );

  @if selector--get-parents($this) {
    $parents: append(selector--get-parents($this), (
      'selector': $parent,
      'relationship': if($relationship == '', ' ', ' #{$relationship} '),
    ));
  }

  @return class--set-attribute-value($this, 'parents', $parents);
}

/// @name get print parents
/// @access public
/// @group class selector
/// @param {map} $selector
/// @return {string} the selector string that must be printed before anything else
@function selector--get-print-parents($this) {
  $parents: selector--get-parents($this);
  $print: '';

  @if not $parents or length($parents) == 0 {
    @return $print;
  }

  @each $parent in $parents {
    $parent-selector: map-get($parent, 'selector');
    $parent-relationship: map-get($parent, 'relationship');
    $print: $print + selector--get-print($parent-selector) + $parent-relationship;
  }

  @return $print;
}


@function selector--get-print($this) {
  $print--tag: selector--get-print-tag($this);
  $print--prefix: selector--get-print-prefix($this);
  $print--block: selector--get-block($this);
  $print--element: selector--get-print-element($this);
  $print--pseudo-element: selector--get-print-pseudo-element($this);

  $print--base: '.' + $print--prefix + $print--block;

  $print--modifier: '';
  @if selector--get-modifier($this) {
    @for $index from 1 through length(selector--get-modifier($this)) {
      $print--modifier: $print--modifier + $print--base + selector--get-print-modifier($this, $index);
    }
  }

  $print--attribute: '';
  @if selector--get-attribute($this) {
    @for $index from 1 through length(selector--get-attribute($this)) {
      $print--attribute: $print--attribute + selector--get-print-attribute($this, $index);
    }
  }

  $print--pseudo-classes: '';
  @if selector--get-pseudo-classes($this) {
    @for $index from 1 through length(selector--get-pseudo-classes($this)) {
      $print--pseudo-classes: $print--pseudo-classes + selector--get-print-pseudo-classes($this, $index);
    }
  }

  @if selector--get-modifier($this) and selector--get-element($this) {
    @return $print--modifier + ' ' + $print--tag + $print--base + $print--element + $print--attribute + $print--pseudo-classes + $print--pseudo-element;
  }

  @if selector--get-modifier($this) {
    @return $print--tag + $print--modifier + $print--attribute + $print--pseudo-classes + $print--pseudo-element;
  }

  // @return $print--tag + $print--base + $print--element + $print--attribute + $print--pseudo-classes + $print--pseudo-element;
  @return $print--tag + $print--base + $print--element + $print--attribute + $print--pseudo-classes + $print--pseudo-element;
}

@mixin selector($this) {
  $breakpoint-fork: selector--get-breakpoint($this);
  $block: () !global;

  @if selector--get-is-nested($this) {
    @at-root #{selector--get-print-parents($this) selector--get-print($this)} {
    // @at-root #{selector--get-print($this)} {
      @include media-query($breakpoint-fork) {
        @content;
      }
    }
  } @else {
    #{selector--get-print-parents($this) selector--get-print($this)} {
    // #{selector--get-print($this)} {
      @include media-query($breakpoint-fork) {
        @content;
      }
    }
  }
}
