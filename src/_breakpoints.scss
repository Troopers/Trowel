@import './extensions/class';

// $breakpoints--prototype: (
//   'forks': (
//     'type': 'map',
//     'nullable': true,
//   )
// );

@function breakpoints--constructor($forks) {
  $this: ();

  $this: breakpoints--set-forks($this, $forks);

  @return $this;
}

/// @name get forks
/// @access public
/// @group class breakpoints
/// @param {map} $this - the `breakpoints class object`
/// @return {string} forks
@function breakpoints--get-forks($this) {
  @return class--get-attribute($this, 'forks');
}

/// @name set forks
/// @access public
/// @group class breakpoints
/// @param {map} $breakpoints
/// @param {string} $forks
/// @return {map} breakpoints class object updated with new 'forks' value
@function breakpoints--set-forks($this, $forks) {
  $type: class--type('breakpoint', 'forks', $forks, 'map');
  $nullable: class--nullable('breakpoint', 'forks', $forks, true);

  @return class--set-attribute($this, 'forks', $forks);
}

@function breakpoints--get-key-fork($this, $key) {
  $forks: breakpoints--get-forks($this);

  @if not map-has-key($forks, $key) {
    @return null;
  }

  @return map-get($forks, $key);
}

@function breakpoints--get-fork-min-width($this, $key) {
  $key-fork: breakpoints--get-key-fork($this, $key);

  @if not $key-fork or not (map-has-key($key-fork, 'min')) {
    @return null;
  }

  @return map-get($key-fork, 'min');
}

@function breakpoints--get-fork-max-width($this, $key) {
  $key-fork: breakpoints--get-key-fork($this, $key);

  @if not $key-fork or not (map-has-key($key-fork, 'max')) {
    @return null;
  }

  @return map-get($key-fork, 'max');
}


@function breakpoint--get-fork-query($this, $key, $philosophy: 'and-more') {
  $philosophies: ('and-more', 'and-less', 'only');
  $philosophies-min-width: ('and-more', 'only');
  $philosophies-max-width: ('and-less', 'only');

  @if not index($philosophies, $philosophy) {
    @error 'the $philosophy param must be \'and-more\', \'and-less\' or \'only\'';
  }

  $query-parts: ();

  @if breakpoints--get-fork-min-width($this, $key) and index($philosophies-min-width, $philosophy) {
    $query-parts: append($query-parts, '(min-width: #{breakpoints--get-fork-min-width($this, $key)})');
  }

  @if breakpoints--get-fork-max-width($this, $key) and index($philosophies-max-width, $philosophy) {
    $query-parts: append($query-parts, '(max-width: #{breakpoints--get-fork-max-width($this, $key)})');
  }

  $query: null;

  @if length($query-parts) > 0 {
    @for $index from 1 through length($query-parts) {
      $query-part: nth($query-parts, $index);

      $query: if($index == 1, $query-part, $query + ' and ' + $query-part);
    }
  }

  @return $query;
}

@mixin media-query ($fork, $philosophy: 'and-more') {
  @if not variable-exists(breakpoints) or not $fork {
    @content;
  } @else {
    $breakpoints: breakpoints--constructor($breakpoints);

    @if not breakpoint--get-fork-query($breakpoints, $fork, $philosophy) {
      @content;
    } @else {
      @media #{breakpoint--get-fork-query($breakpoints, $fork, $philosophy)} {
        @content;
      }
    }
  }
}
