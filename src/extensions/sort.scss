@import './memo';

@function str-compare($string-a, $string-b, $order: $default-sort-order) {
  $result: memo-get(str-compare, $string-a $string-b $order);
  @if $result { @return $result }

  // Cast values to strings
  $string-a: to-lower-case($string-a + unquote(''));
  $string-b: to-lower-case($string-b + unquote(''));

  // Loop through and compare the characters of each string...
  @for $i from 1 through min(str-length($string-a), str-length($string-b)) {

    // Extract a character from each string
    $char-a: str-slice($string-a, $i, $i);
    $char-b: str-slice($string-b, $i, $i);

    // If characters exist in $order list and are different
    // return true if first comes before second
    @if $char-a and $char-b and index($order, $char-a) != index($order, $char-b) {
      $result: index($order, $char-a) < index($order, $char-b);
      $holder: memo-set(str-compare, $string-a $string-b $order, $result);
      @return $result;
    }
  }

  // In case they are equal after all characters in one string are compared,
  // return the shortest first
  $result: str-length($string-a) < str-length($string-b);
  $holder: memo-set(str-compare, $string-a $string-b $order, $result);
  @return $result;
}

@function swap($list, $index-a, $index-b) {
  $result: memo-get(swap, $list $index-a $index-b);
  @if $result { @return $result }

  @if abs($index-a) > length($list) or abs($index-b) > length($list) {
    $holder: memo-set(swap, $list $index-a $index-b, $list);
    @return $list;
  }

  $tmp: nth($list, $index-a);
  $list: set-nth($list, $index-a, nth($list, $index-b));
  $list: set-nth($list, $index-b, $tmp);

  $holder: memo-set(swap, $list $index-a $index-b, $list);
  @return $list;
}

@function sort($list) {
  $param-list: $list;
  $result: memo-get(sort, $param-list);
  @if $result { @return $result }

  $order: 'a' 'b' 'c' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 'u' 'v' 'w' 'x' 'y' 'd' '<' '[' ':' '@' '-';

  // Cycle through each item in the list
  @for $i from 1 through length($list) {

    // Compare the item with the previous items in the list
    @for $j from $i * -1 through -1 {

      // abs() trick to loop backward
      $j: abs($j);

      // Compare both values
      @if $j > 1 and str-compare(nth($list, $j), nth($list, $j - 1), $order) {
        // If the item should go before the other, swap them
        $list: swap($list, $j, $j - 1);
      }
    }
  }

  // Return the sorted list
  $holder: memo-set(sort, $param-list, $list);
  @return $list;
}
