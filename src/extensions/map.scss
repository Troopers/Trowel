// Map get
// -------

@function map-get-deep($map, $keys...) {
  @if length($keys) == 1 {
    $keys: nth($keys, 1);
  }
  $warn: "#{nth($keys, 1)}";
  $length: length($keys);
  $get: map-get($map, nth($keys, 1));

  @if $length > 1 {
    @for $i from 2 through $length {
      @if $get != null and type-of($get) == 'map' {
        $warn: $warn + "->#{nth($keys, $i)}";
        $get: map-get($get, nth($keys, $i));

        @if $get == null {
          @return _map-get-deep-warning($warn, $get);
        }
      } @else {
        @return _map-get-deep-warning($warn, $get);
      }
    }
  }

  @return $get;
}

@function _map-get-deep-warning($warn, $get) {
  @if map-get($trowel-config, 'debug') {
    @if $get == null {
      @warn "Map has no value for key search `#{$warn}`";
    } @else if type-of($get) != 'map' {
      @warn "Non-map value found for key search `#{$warn}`, cannot search for key `#{nth($keys, $i)}`";
    }
  }
  @return null;
}




// Map set
// -------

@function _get-keys($keys, $counter) {
  $return: ();
  @for $i from 1 to $counter {
    $return: append($return, nth($keys, $i));
  }
  @return $return;
}

@function map-set-deep($map, $keys, $value) {
  $private-sassy-maps-suppress-warnings: true !global;
  $length: length($keys);
  $get-keys: ();
  $map-level: ();


  @if $length > 1 {
    $get-keys: _get-keys($keys, $length);
    $map-level: map-get-deep($map, $get-keys);
  }
  $merge: (nth($keys, $length): $value);
  @if $map-level {
    $merge: map-merge($map-level, $merge);
  }
  @for $i from ($length * -1 + 1) through -1 {
    $j: abs($i);
    $key: nth($keys, $j);

    @if $j > 1 {
      $get-keys: _get-keys($keys, $j);
      $map-level: map-get-deep($map, $get-keys);
      @if $map-level {
        $merge: map-merge($map-level, ($key: $merge));
      } @else {
        $merge: ($key: $merge);
      }
    } @else {
      $merge: ($key: $merge);
    }
  }
  $map: map-merge($map, $merge);

  $private-sassy-maps-suppress-warnings: false !global;
  @return $map;
}




// Smart merge
// -----------

@function map-smart-merge($parent-map, $child-map) {
  $result: $parent-map;
  @each $key, $value in $child-map {
    @if (not map-has-key($result, $key)) or (type-of(map-get($result, $key)) != type-of($value)) or (not (type-of(map-get($result, $key)) == map and type-of($value) == map)) {
      $result: map-merge($result, ($key: $value));
    } @else {
      $result: map-merge($result, ($key: map-smart-merge(map-get($result, $key), $value)));
    }
  }
  @return $result;
}
