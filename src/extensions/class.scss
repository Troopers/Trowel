@import './memo';

@function class--get-attribute-property($object, $attribute, $property) {
  @return map-get(map-get($object, $attribute), $property);
}

@function class--get-name($object) {
  @return class--get-attribute-property($object, '~', 'classname');
};

@function class--get-attribute-type($object, $attribute) {
  @return class--get-attribute-property($object, $attribute, 'type');
};

@function class--get-attribute-value($object, $attribute, $nth: null) {
  // $result: memo-get(class--get-attribute-value, $object $attribute $nth);
  // @if $result { @return $result }

  $value: class--get-attribute-property($object, $attribute, 'value');

  @if type-of($value) == 'list' and class--get-attribute-collection($object, $attribute) and type-of($nth) == 'number' {
    $value: if(length($value) >= $nth, nth($value, $nth), null);
  }

  // $holder: memo-set(class--get-attribute-value, $object $attribute $nth, $value);
  @return $value;
};

@function class--get-attribute-nullable($object, $attribute) {
  @return class--get-attribute-property($object, $attribute, 'nullable');
};

@function class--get-attribute-choices($object, $attribute) {
  @return class--get-attribute-property($object, $attribute, 'choices');
};

@function class--get-attribute-collection($object, $attribute) {
  @return class--get-attribute-property($object, $attribute, 'collection');
};

@function class--attribute-nullable-is-ok($attribute, $value, $classname, $nullable) {
  // $result: memo-get(class--attribute-nullable-is-ok, $attribute $value $classname $nullable);
  // @if $result { @return $result }

  $nullable--is-ok: ($value == null and $nullable) or $value != null;

  @if not $nullable--is-ok {
    @error 'the attribute \"#{$attribute}\" from the \"#{$classname}\" cannot be null';
    @return false;
  }

  // $holder: memo-set(class--attribute-nullable-is-ok, $attribute $value $classname $nullable, $nullable--is-ok);
  @return $nullable--is-ok;
}

@function class--attribute-choices-is-ok($attribute, $value, $classname, $choices, $nullable) {
  // $result: memo-get(class--attribute-choices-is-ok, $attribute $value $classname $choices $nullable);
  // @if $result { @return $result }

  $choices--is-ok: ($choices and index($choices, $value)) or not $choices or (not index($choices, $value) and $value == null and $nullable);
  @if not $choices--is-ok {
    $choices--error: 'the attribute \"#{$attribute}\" from the \"#{$classname}\" must be ';
    @for $index from 1 through length($choices) {
      @if $index > 1 {
        $choices--error: $choices--error + if($index == length($choices), ' or ', ', ');
      }
      $choices--error: $choices--error + nth($choices, $index);
    }
    @error $choices--error;
    @return false;
  }

  // $holder: memo-set(class--attribute-choices-is-ok, $attribute $value $classname $choices $nullable, $choices--is-ok);
  @return $choices--is-ok;
}

@function class--attribute-type-is-ok($attribute, $value, $classname, $type, $nullable) {
  // $result: memo-get(class--attribute-type-is-ok, $attribute $value $classname $type $nullable);
  // @if $result { @return $result }

  $type--is-ok: (type-of($value) == $type) or ($value == null and $nullable);
  @if not $type--is-ok {
    @error 'the attribute \"#{$attribute}\" from the \"#{$classname}\" class must be a \"#{$type}\" (currently \"#{type-of($value)}\")';
    @return false;
  }

  // $holder: memo-set(class--attribute-type-is-ok, $attribute $value $classname $type $nullable, $type--is-ok);
  @return $type--is-ok;
}

@function class--attribute-is-ok($attribute, $value, $classname, $nullable, $choices, $type) {
  // $result: memo-get(class--attribute-is-ok, $attribute $value $classname $nullable $choices $type);
  // @if $result { @return $result }

  $nullable--is-ok: class--attribute-nullable-is-ok($attribute, $value, $classname, $nullable);
  $choices--is-ok: class--attribute-choices-is-ok($attribute, $value, $classname, $choices, $nullable);
  $type--is-ok: class--attribute-type-is-ok($attribute, $value, $classname, $type, $nullable);

  $result: $nullable--is-ok and $choices--is-ok and $type--is-ok;

  // $holder: memo-set(class--attribute-is-ok, $attribute $value $classname $nullable $choices $type, $result);
  @return $result;
}


@function class--set-attribute-value($object, $attribute, $value) {
  $result: memo-get(class--set-attribute-value, $object $attribute $value);
  @if $result { @return $result }

  $classname: '$' + class--get-name($object);

  // Get attributes options
  $collection: class--get-attribute-collection($object, $attribute);
  $nullable: class--get-attribute-nullable($object, $attribute);
  $choices: class--get-attribute-choices($object, $attribute);
  $type: class--get-attribute-type($object, $attribute);

  $is-ok: false;
  @if $collection {
    @if type-of($value) != 'list' and $value != null {
      // transform the value into a list of length 1 with as nth(1) the non list value passed before
      $value: ($value, );
    }

    @for $index from 1 through length($value) {
      $value-tested: nth($value, $index);
      $is-ok: class--attribute-is-ok($attribute, $value-tested, $classname, $nullable, $choices, $type);
    }
  } @else {
    // Check if attributes options are ok with the value
    $is-ok: class--attribute-is-ok($attribute, $value, $classname, $nullable, $choices, $type);
  }


  @if $is-ok {
    $attribute-properties: map-merge(map-get($object, $attribute), ('value': $value));
    $object: map-merge($object, ($attribute: $attribute-properties));
  }

  $holder: memo-set(class--set-attribute-value, $object $attribute $value, $object);
  @return $object;
};
